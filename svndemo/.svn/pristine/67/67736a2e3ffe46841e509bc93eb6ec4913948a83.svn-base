package com.reeham.service.impl;

import java.util.Locale;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.springframework.stereotype.Service;

import com.reeham.component.webbiz.domain.BaseDomain;
import com.reeham.component.webbiz.service.SessionService;
import com.reeham.component.webbiz.util.ConstUtils;
import com.reeham.service.DgbSessionService;

@Service
public class DgbSessionServiceImpl implements DgbSessionService,SessionService {
    
    
	public Long getCurrentUserId(HttpServletRequest request) {
		return null;
	}
    private String getFromBASE64(String s) {
			return null;
	} 
    
	@Override
	public <T> T getCurrentUser(HttpServletRequest request, Class<T> cls) {
		return null;//(T)usersService.getModel(this.getCurrentUserId(request));
	}
	
	

  @Override
  public void setCurrentUser(HttpServletRequest request, Object obj) {
	setCurrentUser(request.getSession(), obj);
  }

  @Override
  public void setCurrentUserId(HttpServletRequest request, Long uid) {
	setCurrentUserId(request.getSession(), uid);
  }

  @Override
  public Locale getCurrentLocal(HttpServletRequest request) {
	return getCurrentLocal(request.getSession());
  }

  @Override
  public void setCurrentLocal(HttpServletRequest request, String localKey) {
	setCurrentLocal(request.getSession(), localKey);
  }

  @Override
  public void setAttr(HttpServletRequest request, String key, Object obj) {
	setAttr(request.getSession(), key, obj);
  }

  @Override
  public Object getAttr(HttpServletRequest request, String key) {
	return getAttr(request.getSession(), key);
  }

  @Override
  public <T> T getCurrentUser(HttpSession session, Class<T> cls) {

	return (T) session.getAttribute(ConstUtils.SESSION_USER_KEY);
  }

  @Override
  public void setCurrentUser(HttpSession session, Object obj) {
	if (obj != null) {
	    BaseDomain user = (BaseDomain) obj;
	    session.setAttribute(ConstUtils.SESSION_USER_KEY, user);
	    this.setCurrentUserId(session, user.getId());
	} else {
	    session.removeAttribute(ConstUtils.SESSION_USER_KEY);
	    session.removeAttribute(ConstUtils.SESSION_USER_ID);
	}
  }

  @Override
  public void setCurrentUserId(HttpSession session, Long uid) {
	session.setAttribute(ConstUtils.SESSION_USER_ID, uid);

  }

  @Override
  public Long getCurrentUserId(HttpSession session) {
	return (Long) session.getAttribute(ConstUtils.SESSION_USER_ID);
  }

  @Override
  public Locale getCurrentLocal(HttpSession session) {
	Locale locale = (Locale) session.getAttribute(SessionService.LOCALE_SESSION_ATTRIBUTE_NAME);
	return locale;// locale==null?new Locale(SESSION_DEFAULT_LOCALE):locale;
  }

  @Override
  public void setCurrentLocal(HttpSession session, String localKey) {
	session.setAttribute(SessionService.LOCALE_SESSION_ATTRIBUTE_NAME, new Locale(localKey));
  }

  @Override
  public void setAttr(HttpSession session, String key, Object obj) {
	session.setAttribute(key, obj);

  }

  @Override
  public Object getAttr(HttpSession session, String key) {
	return session.getAttribute(key);

  }

	
	
    
}
